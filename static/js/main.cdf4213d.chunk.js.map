{"version":3,"sources":["mainComponents/ErrorPage.js","mainComponents/ChuckNorrisFact.js","reusableComponents/PageTitle.js","reusableComponents/StarCount.js","mainComponents/CommitsPage.js","mainComponents/HomePage.js","App.js","index.js"],"names":["ErrorPage","className","ChuckNorrisFact","props","getFact","axios","get","then","response","setState","fact","data","value","catch","error","console","log","state","this","type","onClick","Component","PageTitle","title","StarCount","label","role","starNum","JavascriptTimeAgo","locale","en","CommitsPage","commits","today","Date","toISOString","split","yesterday","getTime","url","location","name","fetch","method","headers","json","responseJson","items","history","push","commitList","length","map","item","index","key","src","author","avatar_url","alt","commit","message","slice","date","stars","HomePage","handleClick","alert","repoCard","id","style","textDecoration","to","pathname","full_name","stargazers_count","description","ReactTimeAgo","created_at","withRouter","App","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cdf4213d.chunk.js","sourcesContent":["import React from 'react'\n\n//functional component bc its stateless\nconst ErrorPage = () => {\n  return(\n    <div className=\"error-message\">\n      Sorry! Something went wrong\n    </div>\n  )\n}\n\nexport default ErrorPage","import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport class ChuckNorrisFact extends Component {\n  constructor(props) {\n    super(props)\n    //initialize the state with a placeholder fact so its not empty on page load\n    this.state = {\n      fact: 'Chuck Norris can text using his walkie talkie and without batteries.'\n    }\n  }\n  //fetch a random Chuck quote and store it in state\n  getFact = () => {\n    axios.get('https://api.chucknorris.io/jokes/random')\n      .then(response => {\n      this.setState({fact: response.data.value});\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"chuck-container\">\n        <p>There are no commits for this repo in the last 24 hours</p>\n        <p>Please enjoy a Chuck Norris fact instead!</p>\n        <div className=\"quote-block\">\n          <h3>{'\"' + this.state.fact + '\"'}</h3>\n          <button type=\"button\" \n            className=\"quote-button\"\n            onClick={this.getFact}>\n            More Chuck Facts!\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default ChuckNorrisFact\n","import React from 'react'\n\nfunction PageTitle(props) {\n  return(\n    <h1 className=\"center-text\">{props.title}</h1>\n  )\n}\n\nexport default PageTitle","import React from 'react'\n\nfunction StarCount(props) {\n  return(\n    <div className=\"star-wrapper\">\n      <span label=\"a yellow star\" role=\"img\">‚≠ê</span>\n      <span className=\"star-count\">{props.starNum}</span>\n    </div>\n  )\n}\n\nexport default StarCount\n","import React, { Component } from 'react'\nimport ChuckNorrisFact from './ChuckNorrisFact'\nimport JavascriptTimeAgo from 'javascript-time-ago'\nimport PageTitle from \"../reusableComponents/PageTitle\"\nimport StarCount from \"../reusableComponents/StarCount\"\nimport en from 'javascript-time-ago/locale/en'\n\nJavascriptTimeAgo.locale(en)\n\nexport class CommitsPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      commits: {}\n    }\n  }\n  //fetch latest repo commits and store them in state\n  componentDidMount() {\n    //calculate todays date and tomorrows dates to use in search query\n    const today = new Date().toISOString().split(\"T\")[0]\n    const yesterday = new Date(new Date().getTime() - (24 * 60 * 60 * 1000)).toISOString().split(\"T\")[0]\n\n    const url = `https://api.github.com/search/commits?q=repo:${this.props.location.state.name} author-date:${yesterday}..${today}`\n    \n    // create github api header requirement\n    const headers = {\n      \"Accept\":\"application/vnd.github.cloak-preview\"\n    }\n    fetch(url, {\n      method: 'GET',\n      headers: headers\n    })\n    .then(response => response.json())\n    .then(\n      (responseJson) => {\n        this.setState({\n          commits:responseJson.items\n        })\n      })\n      .catch((error) => {\n        console.log(error)\n        //if error occurs redirect user to fancy error page\n        this.props.history.push('/error')\n      })\n  } \n  render() {\n    const { commits } = this.state\n    const { location  } = this.props\n    //check if there are any commits first then create commit divs\n    const commitList = commits.length ? (\n      commits.map((item, index) => {\n        return (\n          <div className=\"commit-div\" key={index}>\n            <div className=\"author-container\">\n              <img src={item.author.avatar_url} alt={item.author.avatar_url}/>\n              <p className=\"author-name\">{item.commit.author.name}</p>\n            </div>\n            <p className=\"commit-message\">{item.commit.message.slice(0, 200)}</p>\n            <p className=\"commit-date\">{item.commit.author.date.split(\"T\")[0]}</p>\n          </div> \n        )\n      })\n    ) : (\n        //if no commits render a random chuck norris quote :)\n        <ChuckNorrisFact />\n    )\n    return (\n      <div className=\"main-container\"> \n        <PageTitle title={\"Commits made in the last 24 hours\"}/>\n        <div className=\"repo-container\">\n          <div className=\"card-header\">\n            <h1 className=\"repo-title\">{location.state.name}</h1>\n            <StarCount starNum={location.state.stars} />\n          </div>\n          <div className=\"commit-container\">\n            {commitList}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CommitsPage\n","import React, { Component } from 'react'\nimport { Link } from \"react-router-dom\"\nimport { withRouter } from \"react-router\"\nimport PageTitle from \"../reusableComponents/PageTitle\"\nimport ReactTimeAgo from 'react-time-ago'\nimport StarCount from '../reusableComponents/StarCount'\nimport JavascriptTimeAgo from 'javascript-time-ago'\nimport en from 'javascript-time-ago/locale/en'\n\n//initialize time-ago\nJavascriptTimeAgo.locale(en)\n\nexport class HomePage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: {}\n    }\n  }\n\n  //fetch top git repos \n  componentDidMount() {\n    const url = \"https://api.github.com/search/repositories?q=stars:>40000&per_page=100\"\n    fetch(url)\n    .then(response => response.json())\n    .then(\n      (responseJson) => {\n        this.setState({\n          data:responseJson.items\n        })\n      })\n      //if an error occurs redirect the user to the fancy error page\n      .catch((error) => {\n        console.log(error)\n        this.props.history.push('/error')\n      })\n  }\n  //click event to keep things interesting\n  handleClick = () => {\n    alert(\"That sure is a lot of stars!!!\")\n  }\n  render() {\n    const { data } = this.state\n    //check if data loaded first then map through the list and create a div for each card\n    const repoCard = data.length ? (\n      data.map(item => {\n        return(\n          <div key={item.id}  className=\"repository-card\">\n            <div className=\"card-header\">\n              <Link \n                style={{\n                  textDecoration:'none'\n                }} to={{\n                pathname: `/${item.id}`,\n                state: {\n                  name: item.full_name,\n                  stars: item.stargazers_count\n                }\n              }}><span className=\"repository-title\">{item.name}</span></Link>\n              <StarCount starNum={item.stargazers_count} />\n            </div>\n            <p className=\"repository-description\">{item.description.slice(0, 150)}</p>\n            <p className=\"date\">created <ReactTimeAgo date={item.created_at}/></p>\n          </div>\n        )\n      })\n    ) : (\n      //display message while the data loads\n      <p>Loading repos... </p>\n    )\n    return (\n      <div className=\"main-container\">\n        <PageTitle title={\"Top Starred Repositories Currently On Github\"}/>\n        <div className=\"home-container\">{repoCard}</div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(HomePage)\n","import React, { Component } from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport ErrorPage from './mainComponents/ErrorPage'\nimport CommitsPage from \"./mainComponents/CommitsPage\"\nimport HomePage from \"./mainComponents/HomePage\"\n\n//main component for the route organization\nexport class App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" render={(props) => <HomePage {...props} /> } />\n            <Route to path=\"/error\" render={(props) => <ErrorPage {...props} /> } />\n            <Route to path=\"/:repo_id\" render={(props) => <CommitsPage {...props} /> } />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}